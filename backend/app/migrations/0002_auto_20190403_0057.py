# Generated by Django 2.1.7 on 2019-04-02 16:57
# -*- coding: utf-8 -*-

from django.db import migrations, models
import xlrd

booksindex = {
    'name': 0,
    'filename': 1,
    'fileinfo': 2,
    'introduction': 3,
    'imagefilename': 4,
    'money':5
}
booksinfo = [
    ('2013年大学英语六级词汇表', 'bookfiles/2013年大学英语六级词汇表.xls',(0, 1, 0, None),'英语CET6词汇表',"images/book_image/6级.jpg",1500),
    ('GRE词汇6831个','bookfiles/GRE词汇6831个.xls',(0, 1, 0, None),'GRE（美国研究生入学考试）词汇表',"images/book_image/gre.jpg",2500),
    ('TOEFL单词-完整版单词表','bookfiles/TOEFL单词-完整版单词表.xls',(0, 1, 0, None),'TOFEL（托福）词汇表',"images/book_image/托福.jpg",2500),
    ('巴郎sat词汇3300','bookfiles/巴郎sat词汇3300.xls',(0, 1, 0, None),'SAT即美国学术能力评估测试，Barron 3500是老SAT时期非常经典的一本词汇书，它的词汇全部来自于当时的真题',"images/book_image/巴郎SAT.jpg",2000),
    ('高考单词3600','bookfiles/高考单词3600.xls',(0, 1, 0, None),'高考单词书',"images/book_image/高考.jpg",2000),
    ('猴哥SAT3700','bookfiles/猴哥SAT3700.xls',(0, 1, 0, None),'《猴哥SAT词汇蓝宝书》是2010年光明日报出版社出版的图书。',"images/book_image/猴哥SAT.jpg",2000),
    ('新概念英语一词汇','bookfiles/新概念英语一词汇.xls',(0, 1, 0, None),'新概念英语1重点单词、词组',"images/book_image/新概念1.jpg",0),
    ('新概念英语二词汇','bookfiles/新概念英语二词汇.xlsx',(0, 1, 0, None),'新概念英语2重点单词、词组',"images/book_image/新概念2.jpg",0),
    ('新概念英语三词汇','bookfiles/新概念英语三词汇.xlsx',(0, 1, 0, None),'新概念英语3重点单词、词组',"images/book_image/新概念3.jpg",0),
    ('新概念英语四词汇','bookfiles/新概念英语四词汇.xlsx',(0, 1, 0, None),'新概念英语4重点单词、词组',"images/book_image/新概念4.jpg",0),
    ('雅思高频词汇','bookfiles/雅思高频词汇.xlsx',(0, 1, 0, None),'IELTS（雅思考试）词汇表',"images/book_image/雅思高频.jpg",2000),
    ('英语四级单词表4500简明版','bookfiles/英语四级单词表4500简明版.xls',(0, 1, 0, None),'英语CET4词汇表',"images/book_image/4级.jpg",1500),
]

def read_xls_in(filename, en_col, ch_col, begin_row, end_row):
    data = xlrd.open_workbook(filename)
    table = data.sheets()[0]
    n_cols = table.ncols
    result_en = table.col(en_col, start_rowx=begin_row, end_rowx=end_row)
    for i in range(len(result_en)):
        result_en[i] = result_en[i].value
    result_ch = table.col(ch_col, start_rowx=begin_row, end_rowx=end_row)
    for i in range(len(result_ch)):
        result_ch[i] = result_ch[i].value
    return result_en, result_ch

def forwards_func(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    for i in range(len(booksinfo)):
        ens, chs = read_xls_in(booksinfo[i][booksindex['filename']],
            booksinfo[i][booksindex['fileinfo']][0],
            booksinfo[i][booksindex['fileinfo']][1],
            booksinfo[i][booksindex['fileinfo']][2],
            booksinfo[i][booksindex['fileinfo']][3])
        booktable = apps.get_model("app", "Book")
        book = booktable.objects.using(db_alias).create(name=booksinfo[i][booksindex['name']].strip(),
            introduction=booksinfo[i][booksindex['introduction']].strip(),
            image=booksinfo[i][booksindex['imagefilename']],
            money=booksinfo[i][booksindex['money']])
        for j in range(len(ens)):
            wordtable = apps.get_model("app", "Word")
            wordtable.objects.using(db_alias).create(book=book,en=ens[j].strip(),ch=chs[j].strip())

def reserve_func(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    for i in range(len(booksinfo)):
        try:
            booktable = apps.get_model("app", "Book")
            book = booktable.objects.using(db_alias).get(name=booksinfo[i][booksindex['name']],
                introduction=booksinfo[i][booksindex['introduction']],
                image=booksinfo[i][booksindex['imagefilename']],
                money=booksinfo[i][booksindex['money']])
            wordtable = apps.get_model("app", "Word")
            wordtable.objects.using(db_alias).filter(book=book).delete()
            book.delete()
        except expression as identifier:
            pass

class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reserve_func)
    ]
